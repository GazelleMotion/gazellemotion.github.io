[
  {
    "title": "How To Debug Code Like A Pro",
    "summary": "In most cases, you’ll identify a bug or an error that requires your immediate attention. In such a scenario, you don’t have much time and need to fix it like ‘right now’! You neither have a couple of days nor a week to troubleshoot this.",
    "publishedAt": "2021-06-16",
    "tags": [
      "Debugging",
      "Troubleshooting",
      "Problem-Solving",
      "Bug-Fixing"
    ],
    "body": {
      "raw": "\r\nOne of the most overlooked skills by developers commonly happens to be the ability to find and fix problems. Very often, new developers avoid learning to diagnose problems because non of that stuff is really as exciting as writing new code. Well, the reality is you’ll probably spend more time debugging problems in your code than you will building new applications. In this article, I walk you through 5 simple steps that I go through every time I fix an error. I find this to be one of the most efficient ways I’ve found to make the debugging process much easier and less complicated. Next time you hit a bug or an error, keep these in mind.\r\n\r\n### Step 1: Don't Panic\r\n\r\nUn fortunately, simple as it may sound, this is the step that most developers usually get wrong. The first thing they’ll probably do usually is go like “Oh No!” and immediately start changing code or immediately start ‘Googling’. Honestly, non of those is really appropriate as yet. How about we start by “take a breath, relax and look at what’s really going on”?. Don’t just jump in and start making changes, understand the code first.\r\n\r\n### Step 2: Read The Error Messeges If Any\r\n\r\nSadly, this is another thing that people often skip over. The reality is, these error messages are really here for a reason. Their purpose is to give you valuable information so don’t simply just say, “I got an error!”. Try to understand what the error message is trying to covey to you because that’ll actually tell you a lot about what you need to know. However, if you’re not yet quite sure what that means, don’t just skip over it, continue to think it through and dig in.\r\n\r\n### Step 3: Identify The Purpose Of Your Code\r\nHere’s the time to start asking some of those questions;\r\n\r\n“What was the original intention of this code?”\r\n\r\n“What is the code over here doing?”\r\n\r\n“How did I intend this part of the code to behave in the first place?”\r\n\r\n“Does this part of the code function the way it was intended to?”\r\n\r\nIf you know what doesn’t break the code, you’ll very easily know what really breaks the code.\r\n\r\n### Step 4: Figure Out What Breaks The Code\r\n\r\nYou probably know what part of your code is likely to be generating the error or unwanted behavior if you observed Steps 2 and 3 very well. It’s now time to dig in little bit deeper. At this point, you might want to use your IDE’s debugger mode/tools to step through your code using break-points. Here, you can easily observe and keep track of the behavior of your code in action, step by step as a compiler would. That way, you’ll easily identify where the unwanted behavior is stemming from.\r\n\r\nNow that you’ve identified the part of the code where that error is, you definitely know what breaks the code.\r\n\r\n### Step 5: Try A New Solution\r\n\r\nNow that you understand what breaks the code, let’s try out a new solution! For this final step, you may do it multiple times if you don’t get it the first time round. Using knowledge from Steps 3 and 4, you now know both what breaks the code and what doesn’t. Be sure to use that knowledge to test both scenarios and keep them in mind while trying out a new solution. Keep asking those questions along the way;\r\n\r\n“What was the original intention of this code?”\r\n\r\n“What is it doing now?”\r\n\r\n“Does this fix the behavior?”\r\n\r\nIf the fix didn’t work, you might want to go back to Steps one through five again until you get the fix.\r\n",
      "code": "var Component=(()=>{var u=Object.create;var r=Object.defineProperty;var y=Object.getOwnPropertyDescriptor;var c=Object.getOwnPropertyNames;var p=Object.getPrototypeOf,g=Object.prototype.hasOwnProperty;var m=(o,e)=>()=>(e||o((e={exports:{}}).exports,e),e.exports),w=(o,e)=>{for(var n in e)r(o,n,{get:e[n],enumerable:!0})},s=(o,e,n,a)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let i of c(e))!g.call(o,i)&&i!==n&&r(o,i,{get:()=>e[i],enumerable:!(a=y(e,i))||a.enumerable});return o};var f=(o,e,n)=>(n=o!=null?u(p(o)):{},s(e||!o||!o.__esModule?r(n,\"default\",{value:o,enumerable:!0}):n,o)),b=o=>s(r({},\"__esModule\",{value:!0}),o);var l=m((S,h)=>{h.exports=_jsx_runtime});var I={};w(I,{default:()=>x,frontmatter:()=>k});var t=f(l()),k={title:\"How To Debug Code Like A Pro\",publishedAt:\"2021-06-16\",summary:\"In most cases, you\\u2019ll identify a bug or an error that requires your immediate attention. In such a scenario, you don\\u2019t have much time and need to fix it like \\u2018right now\\u2019! You neither have a couple of days nor a week to troubleshoot this.\",tags:[\"Debugging\",\"Troubleshooting\",\"Problem-Solving\",\"Bug-Fixing\"]};function d(o){let e=Object.assign({p:\"p\",h3:\"h3\"},o.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.p,{children:\"One of the most overlooked skills by developers commonly happens to be the ability to find and fix problems. Very often, new developers avoid learning to diagnose problems because non of that stuff is really as exciting as writing new code. Well, the reality is you\\u2019ll probably spend more time debugging problems in your code than you will building new applications. In this article, I walk you through 5 simple steps that I go through every time I fix an error. I find this to be one of the most efficient ways I\\u2019ve found to make the debugging process much easier and less complicated. Next time you hit a bug or an error, keep these in mind.\"}),`\n`,(0,t.jsx)(e.h3,{children:\"Step 1: Don't Panic\"}),`\n`,(0,t.jsx)(e.p,{children:\"Un fortunately, simple as it may sound, this is the step that most developers usually get wrong. The first thing they\\u2019ll probably do usually is go like \\u201COh No!\\u201D and immediately start changing code or immediately start \\u2018Googling\\u2019. Honestly, non of those is really appropriate as yet. How about we start by \\u201Ctake a breath, relax and look at what\\u2019s really going on\\u201D?. Don\\u2019t just jump in and start making changes, understand the code first.\"}),`\n`,(0,t.jsx)(e.h3,{children:\"Step 2: Read The Error Messeges If Any\"}),`\n`,(0,t.jsx)(e.p,{children:\"Sadly, this is another thing that people often skip over. The reality is, these error messages are really here for a reason. Their purpose is to give you valuable information so don\\u2019t simply just say, \\u201CI got an error!\\u201D. Try to understand what the error message is trying to covey to you because that\\u2019ll actually tell you a lot about what you need to know. However, if you\\u2019re not yet quite sure what that means, don\\u2019t just skip over it, continue to think it through and dig in.\"}),`\n`,(0,t.jsx)(e.h3,{children:\"Step 3: Identify The Purpose Of Your Code\"}),`\n`,(0,t.jsx)(e.p,{children:\"Here\\u2019s the time to start asking some of those questions;\"}),`\n`,(0,t.jsx)(e.p,{children:\"\\u201CWhat was the original intention of this code?\\u201D\"}),`\n`,(0,t.jsx)(e.p,{children:\"\\u201CWhat is the code over here doing?\\u201D\"}),`\n`,(0,t.jsx)(e.p,{children:\"\\u201CHow did I intend this part of the code to behave in the first place?\\u201D\"}),`\n`,(0,t.jsx)(e.p,{children:\"\\u201CDoes this part of the code function the way it was intended to?\\u201D\"}),`\n`,(0,t.jsx)(e.p,{children:\"If you know what doesn\\u2019t break the code, you\\u2019ll very easily know what really breaks the code.\"}),`\n`,(0,t.jsx)(e.h3,{children:\"Step 4: Figure Out What Breaks The Code\"}),`\n`,(0,t.jsx)(e.p,{children:\"You probably know what part of your code is likely to be generating the error or unwanted behavior if you observed Steps 2 and 3 very well. It\\u2019s now time to dig in little bit deeper. At this point, you might want to use your IDE\\u2019s debugger mode/tools to step through your code using break-points. Here, you can easily observe and keep track of the behavior of your code in action, step by step as a compiler would. That way, you\\u2019ll easily identify where the unwanted behavior is stemming from.\"}),`\n`,(0,t.jsx)(e.p,{children:\"Now that you\\u2019ve identified the part of the code where that error is, you definitely know what breaks the code.\"}),`\n`,(0,t.jsx)(e.h3,{children:\"Step 5: Try A New Solution\"}),`\n`,(0,t.jsx)(e.p,{children:\"Now that you understand what breaks the code, let\\u2019s try out a new solution! For this final step, you may do it multiple times if you don\\u2019t get it the first time round. Using knowledge from Steps 3 and 4, you now know both what breaks the code and what doesn\\u2019t. Be sure to use that knowledge to test both scenarios and keep them in mind while trying out a new solution. Keep asking those questions along the way;\"}),`\n`,(0,t.jsx)(e.p,{children:\"\\u201CWhat was the original intention of this code?\\u201D\"}),`\n`,(0,t.jsx)(e.p,{children:\"\\u201CWhat is it doing now?\\u201D\"}),`\n`,(0,t.jsx)(e.p,{children:\"\\u201CDoes this fix the behavior?\\u201D\"}),`\n`,(0,t.jsx)(e.p,{children:\"If the fix didn\\u2019t work, you might want to go back to Steps one through five again until you get the fix.\"})]})}function v(o={}){let{wrapper:e}=o.components||{};return e?(0,t.jsx)(e,Object.assign({},o,{children:(0,t.jsx)(d,o)})):d(o)}var x=v;return b(I);})();\n;return Component;"
    },
    "_id": "blog/How-To-Debug-Code-Like-A-Pro.mdx",
    "_raw": {
      "sourceFilePath": "blog/How-To-Debug-Code-Like-A-Pro.mdx",
      "sourceFileName": "How-To-Debug-Code-Like-A-Pro.mdx",
      "sourceFileDir": "blog",
      "contentType": "mdx",
      "flattenedPath": "blog/How-To-Debug-Code-Like-A-Pro"
    },
    "type": "Post",
    "slug": "How-To-Debug-Code-Like-A-Pro",
    "image": "/blog/How-To-Debug-Code-Like-A-Pro/image.png",
    "og": "/blog/How-To-Debug-Code-Like-A-Pro/og.jpg"
  }
]